import{flags as e,scanDirectives as t,filterSchema as s,walkThroughHandler as a}from"./lib/engine.min.js";let SyntaxeIO={};SyntaxeIO.init=(e=null)=>{if(!e||!e.app)throw Error("No app detected.");new SyntaxeRequestGate(e)};let SyntaxeRequestGate=class{constructor(e=null){e.app.set("syntaxeEnabledStatus",e.enabled),e.app.use(this.#a)}async #a(e,a,n){let{resolve:r,schema:i,client:l}=t(e,a),o=e.app.get("syntaxeEnabledStatus");a.set("Syntaxe-Enabled",o),o&&r&&(a.syntaxeSchema=await s(i),a.syntaxeSchema.status?new SyntaxeResponseGate(a):(a.set("Syntaxe-Schema-Resolved",!1),a.set("Syntaxe-Schema-Resolved-Error","Query failed. Check your schema and try again."))),n()}},SyntaxeResponseGate=class{#b;#c;#d;constructor(e){this.#b=e,this.#d=this.#b.send,this.#b.send=this.#e()}#e(){return async e=>{this.#c=await a({data:e,res:this.#b})??e,this.#f()}}#f(){this.#d.call(this.#b,this.#c)}};export default SyntaxeIO;